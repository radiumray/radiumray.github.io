<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雷</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://leirobot.com/"/>
  <updated>2019-08-12T05:17:29.168Z</updated>
  <id>http://leirobot.com/</id>
  
  <author>
    <name>ray</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pyTorch</title>
    <link href="http://leirobot.com/2019/08/12/pyTorch/"/>
    <id>http://leirobot.com/2019/08/12/pyTorch/</id>
    <published>2019-08-12T03:03:22.000Z</published>
    <updated>2019-08-12T05:17:29.168Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pytorch.org/get-started/locally/" target="_blank" rel="noopener">https://pytorch.org/get-started/locally/</a></p><p>本人环境是<br>CUDA 9.0<br>To install PyTorch via pip, and you are using CUDA 9.0, use the following command, depending on your Python version:<br>Python 3.6</p><!-- pip3 install https://download.pytorch.org/whl/cu90/torch-1.0.1-cp36-cp36m-win_amd64.whl --><p>pip install <a href="https://download.pytorch.org/whl/cu90/torch-1.1.0-cp36-cp36m-win_amd64.whl" target="_blank" rel="noopener">https://download.pytorch.org/whl/cu90/torch-1.1.0-cp36-cp36m-win_amd64.whl</a><br>pip install torchvision</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://pytorch.org/get-started/locally/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pytorch.org/get-started/locally/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本人环
      
    
    </summary>
    
      <category term="深度学习" scheme="http://leirobot.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="dl" scheme="http://leirobot.com/tags/dl/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://leirobot.com/2019/08/11/designPattern/"/>
    <id>http://leirobot.com/2019/08/11/designPattern/</id>
    <published>2019-08-11T08:52:24.000Z</published>
    <updated>2019-08-15T02:48:10.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python与设计模式"><a href="#python与设计模式" class="headerlink" title="python与设计模式"></a>python与设计模式</h1><h2 id="创建类设计模式："><a href="#创建类设计模式：" class="headerlink" title="创建类设计模式："></a>创建类设计模式：</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式:"></a>单例模式:</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单例模式</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#这里使用方法__new__来实现单例模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span><span class="comment">#抽象单例</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'_instance'</span>):</span><br><span class="line">            orig = super(Singleton, cls)</span><br><span class="line">            cls._instance = orig.__new__(cls, *args, **kw)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"><span class="comment">#总线</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span><span class="params">(Singleton)</span>:</span></span><br><span class="line">    lock = threading.RLock()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sendData</span><span class="params">(self,data)</span>:</span></span><br><span class="line">        self.lock.acquire()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        print(<span class="string">"Sending Signal Data..."</span>,data)</span><br><span class="line">        self.lock.release()</span><br><span class="line"><span class="comment">#线程对象，为更加说明单例的含义，这里将Bus对象实例化写在了run里</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisitEntity</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    my_bus=<span class="string">""</span></span><br><span class="line">    name=<span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setName</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.my_bus=Bus()</span><br><span class="line">        self.my_bus.sendData(self.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"Entity %d begin to run..."</span>%i)</span><br><span class="line">        my_entity=VisitEntity()</span><br><span class="line">        my_entity.setName(<span class="string">"Entity_"</span>+str(i))</span><br><span class="line">        my_entity.start()</span><br></pre></td></tr></table></figure><pre><code>保证某一个类只有一个实例，而且在全局只有一个访问点三、单例模式的优点和应用单例模式的优点：1、由于单例模式要求在全局内只有一个实例，因而可以节省比较多的内存空间；2、全局只有一个接入点，可以更好地进行数据同步控制，避免多重占用；3、单例可长驻内存，减少系统开销。单例模式的应用举例：1、生成全局惟一的序列号；2、访问全局复用的惟一资源，如磁盘、总线等；3、单个对象占用的资源过多，如数据库等；4、系统全局统一管理，如Windows下的Task Manager；5、网站计数器。四、单例模式的缺点1、单例模式的扩展是比较困难的；2、赋于了单例以太多的职责，某种程度上违反单一职责原则（六大原则后面会讲到）;3、单例模式是并发协作软件模块中需要最先完成的，因而其不利于测试；4、单例模式在某种情况下会导致“资源瓶颈”。</code></pre><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><pre><code>工厂模式常与继承派生一起使用，定义一个用于创建对象的接口，让子类决定实例化哪个类。工厂方法使一个类的实例化延迟到其子类。</code></pre><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><pre><code>图层概念用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。需要注意一点的是，进行clone操作后，新对象的构造函数没有被二次执行，新对象的内容是从内存里直接拷贝的。</code></pre><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><pre><code>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</code></pre><h2 id="结构类设计模式："><a href="#结构类设计模式：" class="headerlink" title="结构类设计模式："></a>结构类设计模式：</h2><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><pre><code>为某对象提供一个代理，以控制对此对象的访问和控制。代理模式在使用过程中，应尽量对抽象主题类进行代理，而尽量不要对加过修饰和方法的子类代理。</code></pre><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><pre><code>动态地给一个对象添加一些额外的职责。在增加功能方面，装饰器模式比生成子类更为灵活。</code></pre><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><pre><code>将一个类的接口变换成客户端期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。适配器模式和装饰模式有一定的相似性，都起包装的作用，但二者本质上又是不同的，装饰模式的结果，是给一个对象增加了一些额外的职责，而适配器模式，则是将另一个对象进行了“伪装”。</code></pre><h3 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h3><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><h3 id="桥梁模式"><a href="#桥梁模式" class="headerlink" title="桥梁模式"></a>桥梁模式</h3><h2 id="行为类设计模式："><a href="#行为类设计模式：" class="headerlink" title="行为类设计模式："></a>行为类设计模式：</h2><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><pre><code>触发-反馈机制的系统，都可以使用命令模式思想。如基于管道结构的命令系统（如SHELL），可以直接套用命令模式；此外，GUI系统中的操作反馈（如点击、键入等），也可以使用命令模式思想。</code></pre><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><h3 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h3><pre><code>比较复杂的算法，可以把核心算法提取出来，周边功能在子类中实现。例如，机器学习中的监督学习算法有很多，如决策树、KNN、SVM等，但机器学习的流程大致相同，都包含输入样本、拟合（fit）、预测等过程，这样就可以把这些过程提取出来，构造模板方法，并通过钩子方法控制流程。</code></pre><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><pre><code>观察者模式也叫发布-订阅模式，其定义如下：定义对象间一种一对多的依赖关系，使得当该对象状态改变时，所有依赖于它的对象都会得到通知，并被自动更新。</code></pre><h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p><a href="https://yq.aliyun.com/topic/122" target="_blank" rel="noopener">https://yq.aliyun.com/topic/122</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python与设计模式&quot;&gt;&lt;a href=&quot;#python与设计模式&quot; class=&quot;headerlink&quot; title=&quot;python与设计模式&quot;&gt;&lt;/a&gt;python与设计模式&lt;/h1&gt;&lt;h2 id=&quot;创建类设计模式：&quot;&gt;&lt;a href=&quot;#创建类设计模式：&quot;
      
    
    </summary>
    
      <category term="python" scheme="http://leirobot.com/categories/python/"/>
    
    
      <category term="python" scheme="http://leirobot.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>自动驾驶</title>
    <link href="http://leirobot.com/2019/08/11/sdc/"/>
    <id>http://leirobot.com/2019/08/11/sdc/</id>
    <published>2019-08-11T08:52:24.000Z</published>
    <updated>2019-08-11T15:17:04.147Z</updated>
    
    <content type="html"><![CDATA[<p>这里有一部分自动驾驶的测试视频<br>包括，车架硬件测试，实际道路的模拟器（airsim，GTAV）和行车记录仪视频</p><a id="more"></a><p>ESP32的图传遥控车，用于自动驾驶，自动驾驶神经网络处理在另一台主机，图传给主机处理再发送指令给小车。</p><h2 id="ESP32的图传遥控车"><a href="#ESP32的图传遥控车" class="headerlink" title="[ESP32的图传遥控车]"></a><a href="https://v.youku.com/v_show/id_XNDMwOTYyMjQ1Mg==.html?spm=user.playlsit.page.17" target="_Blank">[ESP32的图传遥控车]</a></h2><p>预研Opencv, tensorflow, keras开始尝试做基于视觉的自动驾驶<br>用一个端到端神经网络实现了一个自动驾驶小车(树莓派)：<br>Wifi图传，udp控制，本地存储标签数据，多线程，电机舵机驱动：</p><h2 id="乐高车架测试"><a href="#乐高车架测试" class="headerlink" title="[乐高车架测试]"></a><a href="https://v.youku.com/v_show/id_XNDMwOTYyMjQ0OA==.html?spm=user.playlsit.page.15" target="_Blank">[乐高车架测试]</a></h2><h2 id="飞思卡尔车架测试"><a href="#飞思卡尔车架测试" class="headerlink" title="[飞思卡尔车架测试]"></a><a href="https://v.youku.com/v_show/id_XNDMwOTYyMTk2MA==.html?spm=user.playlsit.page.13" target="_Blank">[飞思卡尔车架测试]</a></h2><h2 id="一款车架测试"><a href="#一款车架测试" class="headerlink" title="[一款车架测试]"></a><a href="https://v.youku.com/v_show/id_XNDMwOTYzNTk1Ng==.html?spm=user.playlsit.page.11" target="_Blank">[一款车架测试]</a></h2><p>侠盗车手测试:GTAV有个API插件，可以用python控制游戏里的车，这个视频在夜间自动驾驶，识别车道线通过车头中心点和车道线的垂直线和相交线来决策控制</p><h2 id="侠盗车手测试"><a href="#侠盗车手测试" class="headerlink" title="[侠盗车手测试]"></a><a href="https://v.youku.com/v_show/id_XNDMwOTYyMjQyMA==.html?spm=user.playlsit.page.9" target="_Blank">[侠盗车手测试]</a></h2><h2 id="airsim测试1"><a href="#airsim测试1" class="headerlink" title="[airsim测试1]"></a><a href="https://v.youku.com/v_show/id_XNDMwOTYxNTgwOA==.html?spm=user.playlsit.page.5" target="_Blank">[airsim测试1]</a></h2><h2 id="airsim测试2"><a href="#airsim测试2" class="headerlink" title="[airsim测试2]"></a><a href="https://v.youku.com/v_show/id_XNDMwOTYxNjg4OA==.html?spm=user.playlsit.page.7" target="_Blank">[airsim测试2]</a></h2><h2 id="行车记录仪测试"><a href="#行车记录仪测试" class="headerlink" title="[行车记录仪测试]"></a><a href="https://v.youku.com/v_show/id_XNDMwOTYyMTk2NA==.html?spm=user.playlsit.page.3" target="_Blank">[行车记录仪测试]</a></h2><h2 id="读电表"><a href="#读电表" class="headerlink" title="[读电表]"></a><a href="https://v.youku.com/v_show/id_XNDMwOTYyMTk2OA==.html?spm=user.playlsit.page.1" target="_Blank">[读电表]</a></h2><h2 id="更多视频点击这里"><a href="#更多视频点击这里" class="headerlink" title="更多视频点击这里"></a><a href="https://i.youku.com/i/UMTI5NjUyODk2/videos?spm=a2hzp.8253869.0.0" target="_Blank">更多视频点击这里</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里有一部分自动驾驶的测试视频&lt;br&gt;包括，车架硬件测试，实际道路的模拟器（airsim，GTAV）和行车记录仪视频&lt;/p&gt;
    
    </summary>
    
      <category term="自动驾驶" scheme="http://leirobot.com/categories/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/"/>
    
      <category term="opencv" scheme="http://leirobot.com/categories/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/opencv/"/>
    
    
      <category term="sdc" scheme="http://leirobot.com/tags/sdc/"/>
    
      <category term="opencv" scheme="http://leirobot.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装opencv</title>
    <link href="http://leirobot.com/2019/08/11/ubuntuOpencv/"/>
    <id>http://leirobot.com/2019/08/11/ubuntuOpencv/</id>
    <published>2019-08-11T08:52:24.000Z</published>
    <updated>2019-08-15T02:52:55.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载opencv"><a href="#下载opencv" class="headerlink" title="下载opencv"></a>下载opencv</h2><p>git clone <a href="https://github.com/opencv/opencv.git" target="_blank" rel="noopener">https://github.com/opencv/opencv.git</a><br>git clone <a href="https://github.com/opencv/opencv_contrib.git" target="_blank" rel="noopener">https://github.com/opencv/opencv_contrib.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载opencv&quot;&gt;&lt;a href=&quot;#下载opencv&quot; class=&quot;headerlink&quot; title=&quot;下载opencv&quot;&gt;&lt;/a&gt;下载opencv&lt;/h2&gt;&lt;p&gt;git clone &lt;a href=&quot;https://github.com/opencv/o
      
    
    </summary>
    
      <category term="opencv" scheme="http://leirobot.com/categories/opencv/"/>
    
    
      <category term="opencv" scheme="http://leirobot.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>那些年折腾过的东西</title>
    <link href="http://leirobot.com/2019/08/11/struggle/"/>
    <id>http://leirobot.com/2019/08/11/struggle/</id>
    <published>2019-08-11T07:46:12.000Z</published>
    <updated>2019-08-11T15:14:46.932Z</updated>
    
    <content type="html"><![CDATA[<p>2014那一年玩了许多电路板，写了许多课程</p><p>这里有一部分视频：</p><a id="more"></a><h2 id="物联网远程控制加湿器"><a href="#物联网远程控制加湿器" class="headerlink" title="[物联网远程控制加湿器]"></a><a href="https://v.youku.com/v_show/id_XOTExMDA0OTcy.html?spm=a2hzp.8253869.0.0" target="_Blank">[物联网远程控制加湿器]</a></h2><h2 id="蓝牙控制小车"><a href="#蓝牙控制小车" class="headerlink" title="[蓝牙控制小车]"></a><a href="https://v.youku.com/v_show/id_XMTQ0ODYwNDIwOA==.html?spm=a2hzp.8253869.0.0" target="_Blank">[蓝牙控制小车]</a></h2><h2 id="wifi控制乐高车"><a href="#wifi控制乐高车" class="headerlink" title="[wifi控制乐高车]"></a><a href="https://v.youku.com/v_show/id_XOTAxMjEzMjc2.html?spm=a2hzp.8253869.0.0" target="_Blank">[wifi控制乐高车]</a></h2><h2 id="光传输摩尔斯码"><a href="#光传输摩尔斯码" class="headerlink" title="[光传输摩尔斯码]"></a><a href="https://v.youku.com/v_show/id_XODU4Nzc0MDUy.html?spm=a2hzp.8253869.0.0" target="_Blank">[光传输摩尔斯码]</a></h2><h2 id="OLED动画"><a href="#OLED动画" class="headerlink" title="[OLED动画]"></a><a href="https://v.youku.com/v_show/id_XODE2NDk2MjEy.html?spm=a2hzp.8253869.0.0" target="_Blank">[OLED动画]</a></h2><h2 id="触碰琴"><a href="#触碰琴" class="headerlink" title="[触碰琴]"></a><a href="https://v.youku.com/v_show/id_XODA4MTkwMDY4.html?spm=a2hzp.8253869.0.0" target="_Blank">[触碰琴]</a></h2><h2 id="平衡车"><a href="#平衡车" class="headerlink" title="[平衡车]"></a><a href="https://v.youku.com/v_show/id_XNzA2NzgxMjM2.html?spm=a2hzp.8253869.0.0" target="_Blank">[平衡车]</a></h2><h2 id="温湿度数码管"><a href="#温湿度数码管" class="headerlink" title="[温湿度数码管]"></a><a href="https://v.youku.com/v_show/id_XNjkyMzU1MTI0.html?spm=a2hzp.8253869.0.0" target="_Blank">[温湿度数码管]</a></h2><h2 id="更多折腾的视频点击这里"><a href="#更多折腾的视频点击这里" class="headerlink" title="更多折腾的视频点击这里"></a><a href="https://i.youku.com/i/UMTI5NjUyODk2/videos?spm=a2hzp.8253869.0.0" target="_Blank">更多折腾的视频点击这里</a></h2><h2 id="wiki课程点击进入"><a href="#wiki课程点击进入" class="headerlink" title="wiki课程点击进入"></a><a href="https://wiki.microduino.cn/index.php/%E5%85%B6%E4%BB%96%E6%95%99%E7%A8%8B" target="_Blank">wiki课程点击进入</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2014那一年玩了许多电路板，写了许多课程&lt;/p&gt;
&lt;p&gt;这里有一部分视频：&lt;/p&gt;
    
    </summary>
    
      <category term="嵌入式" scheme="http://leirobot.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
      <category term="embed" scheme="http://leirobot.com/tags/embed/"/>
    
  </entry>
  
  <entry>
    <title>机器学习</title>
    <link href="http://leirobot.com/2019/08/11/derivative/"/>
    <id>http://leirobot.com/2019/08/11/derivative/</id>
    <published>2019-08-11T01:55:42.000Z</published>
    <updated>2019-08-11T12:07:34.413Z</updated>
    
    <content type="html"><![CDATA[<p>函数求导，损失函数，梯度下降，数学公式推导，3d动画演示</p><a id="more"></a><a href="https://github.com/radiumray/ML" target="_blank" rel="noopener">点击进入：<img border="0" src></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数求导，损失函数，梯度下降，数学公式推导，3d动画演示&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://leirobot.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="人工智能" scheme="http://leirobot.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="ml" scheme="http://leirobot.com/tags/ml/"/>
    
      <category term="ai" scheme="http://leirobot.com/tags/ai/"/>
    
  </entry>
  
  <entry>
    <title>openpose</title>
    <link href="http://leirobot.com/2019/08/11/openPose/"/>
    <id>http://leirobot.com/2019/08/11/openPose/</id>
    <published>2019-08-11T01:55:42.000Z</published>
    <updated>2019-08-18T16:02:51.318Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/YangZeyu95/unofficial-implement-of-openpose" target="_blank" rel="noopener">https://github.com/YangZeyu95/unofficial-implement-of-openpose</a></p><p><a href="https://github.com/tensorlayer/openpose-plus" target="_blank" rel="noopener">https://github.com/tensorlayer/openpose-plus</a></p><p><a href="https://github.com/dlunion/EasyOpenPose" target="_blank" rel="noopener">https://github.com/dlunion/EasyOpenPose</a></p><p><a href="https://blog.techbridge.cc/2019/01/18/openpose-installation/" target="_blank" rel="noopener">https://blog.techbridge.cc/2019/01/18/openpose-installation/</a></p><p><a href="https://zhuanlan.zhihu.com/p/49302970" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/49302970</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/YangZeyu95/unofficial-implement-of-openpose&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/YangZeyu95/uno
      
    
    </summary>
    
      <category term="openpose" scheme="http://leirobot.com/categories/openpose/"/>
    
    
      <category term="poenpose" scheme="http://leirobot.com/tags/poenpose/"/>
    
  </entry>
  
  <entry>
    <title>pyqt5</title>
    <link href="http://leirobot.com/2019/08/11/pyqt5/"/>
    <id>http://leirobot.com/2019/08/11/pyqt5/</id>
    <published>2019-08-11T01:55:42.000Z</published>
    <updated>2019-08-18T12:17:29.843Z</updated>
    
    <content type="html"><![CDATA[<p>ui转py：<br>pyuic5 mainwindow.ui -o MainWindow.py</p><p>打包发布：<br>你可以用许多工具把python代码转换成二进制可执行文件</p><p>对我而言，我将使用pyinstaller，因为它不但可以打包python代码成可执行文件，而且是跨平台的(Windows, Linux, Mac OS X, FreeBSD, and Solaris)支持23位，64位</p><p>pyinstaller完全支持pyqt5</p><p>安装pyinstaller:</p><p>$ pip3 install pyinstaller</p><p>安装完后，你可以转换python代码通过：</p><p>$ pyinstaller test.py</p><p>在你的python程序文件夹会生成一个dist文件夹</p><p>在里边有许多生成的文件，咱们把他们搞成一个文件呢？</p><p>你可以用下指令生成一个可执行文件：</p><p>$ pyinstaller –onefile test.py</p><p>每次执行都会有一个控制台窗口，怎末隐藏他呢<br>使用-w参数</p><p>$ pyinstaller -w test.py</p><p>这个仅适用于windows和mac</p><p>pyinstaller提供了许多选项打包app，使用-help查看<br>$ pyinstaller –help</p><p>pip安装报错？</p><p>下面就介绍用setup.py文件进行安装</p><p>1、先下载 pyinstaller的安装文件，下载地址：<a href="http://www.pyinstaller.org/downloads.html" target="_blank" rel="noopener">http://www.pyinstaller.org/downloads.html</a></p><p>2、我安装的是3.4版本，直接下载：pyinstaller 3.4</p><p>3、下载到本地后，直接解压，然后通过管理员模式打开命令窗口，用 cd 命令切换至 pyinstaller的解压路径，然后运行 python setup.py install</p><p>4、安装的过程会花点时间，就耐心等待吧，出现下面的提示表明安装成功<br>通过 pip show pyinstaller查看详细信息进一步确认安装情况</p><hr><p>PyQt5环境搭建及cx_freeze打包exe</p><p>pip install PyQt5<br>pip install cx_freeze</p><p>python setup.py build</p><p><a href="https://www.cnblogs.com/asis/p/pyqt5-cx_freeze.html" target="_blank" rel="noopener">https://www.cnblogs.com/asis/p/pyqt5-cx_freeze.html</a></p><p>没有 designer.exe怎么办：<br><a href="https://codeday.me/bug/20190527/1164947.html" target="_blank" rel="noopener">https://codeday.me/bug/20190527/1164947.html</a></p><p><a href="https://likegeeks.com/pyqt5-tutorial/" target="_blank" rel="noopener">https://likegeeks.com/pyqt5-tutorial/</a><br><a href="https://www.learnpyqt.com/" target="_blank" rel="noopener">https://www.learnpyqt.com/</a></p><p><a href="https://likegeeks.com/pyqt5-tutorial/" target="_blank" rel="noopener">https://likegeeks.com/pyqt5-tutorial/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ui转py：&lt;br&gt;pyuic5 mainwindow.ui -o MainWindow.py&lt;/p&gt;
&lt;p&gt;打包发布：&lt;br&gt;你可以用许多工具把python代码转换成二进制可执行文件&lt;/p&gt;
&lt;p&gt;对我而言，我将使用pyinstaller，因为它不但可以打包python代
      
    
    </summary>
    
      <category term="pyqt5" scheme="http://leirobot.com/categories/pyqt5/"/>
    
    
      <category term="pyqt5" scheme="http://leirobot.com/tags/pyqt5/"/>
    
  </entry>
  
  <entry>
    <title>电影</title>
    <link href="http://leirobot.com/2019/08/04/hello-world/"/>
    <id>http://leirobot.com/2019/08/04/hello-world/</id>
    <published>2019-08-04T13:30:11.037Z</published>
    <updated>2019-08-11T09:28:14.137Z</updated>
    
    <content type="html"><![CDATA[<p>豆瓣高分电影榜</p><a href="https://www.douban.com/doulist/240962/" target="_blank" rel="noopener">点击进入：</a><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;豆瓣高分电影榜&lt;/p&gt;
&lt;a href=&quot;https://www.douban.com/doulist/240962/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
点击进入：
&lt;/a&gt;
    
    </summary>
    
      <category term="电影" scheme="http://leirobot.com/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="movies" scheme="http://leirobot.com/tags/movies/"/>
    
  </entry>
  
</feed>
